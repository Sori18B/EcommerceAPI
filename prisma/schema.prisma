generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID           Int      @id @default(autoincrement())
  roleID           Int
  name             String
  lastName         String
  email            String   @unique
  password         String
  phoneNumber      String  @db.VarChar(15) @unique
  imageURL         String?
  stripeCustomerID String? @db.VarChar(255)

  // timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // relations
  role      Role      @relation(fields: [roleID], references: [roleID])
  addresses Address[]
}

enum AddressType {
  BILLING
  SHIPPING
  BOTH
}

model Address {
  // Identificación
  addressID     Int      @id @default(autoincrement())
  userID        Int
  addressType   AddressType @default(BOTH)

  // Datos personales en la dirección
  firstName     String   @db.VarChar(100)
  lastName      String   @db.VarChar(100)

  // Dirección física (REQUERIDOS por Stripe)
  street        String   @db.VarChar(255)
  neighborhood  String?  @db.VarChar(100)  // ← OPCIONAL
  city          String   @db.VarChar(100)
  state         String   @db.VarChar(100)
  postalCode    String   @db.VarChar(20)
  countryCode   String   @db.VarChar(2)    // ← ISO 2 caracteres

  // Flags de uso
  isBillingDefault  Boolean @default(false)
  isShippingDefault Boolean @default(false)

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  user User @relation(fields: [userID], references: [userID])

  // Índice para performance
  @@index([userID])
}

model Role {
  roleID    Int     @id @default(autoincrement())
  roleName  String  @unique @db.VarChar(50)

  // back-relation
  users User[]
}

model Product {
  productID   Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  basePrice   Decimal   @db.Decimal(10, 2)
  isActive    Boolean   @default(true)

  // FK
  categoryID  Int
  genderID    Int

  // timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // relations
  category    Category  @relation(fields: [categoryID], references: [categoryID], onDelete: Restrict, onUpdate: Cascade)
  gender      Gender    @relation(fields: [genderID], references: [genderID], onDelete: Restrict, onUpdate: Cascade)
  images      ProductImage[]
  variants    ProductVariant[]
  favorites   Favorite[]

  // indices útiles para catálogo
  @@index([categoryID])
  @@index([genderID])
  @@index([isActive])
}

model Category {
  categoryID   Int      @id @default(autoincrement())
  categoryName String   @db.VarChar(255)
  description  String?  @db.Text
  isActive     Boolean  @default(true)

  // back-relation
  products     Product[]
}

model Gender {
  genderID   Int     @id @default(autoincrement())
  genderName String  @db.VarChar(50)

  // back-relation
  products   Product[]
}

model ProductImage {
  imageID      Int      @id @default(autoincrement())
  productID    Int
  imageURL     String   @db.VarChar(2048)
  altText      String?  @db.VarChar(255)
  displayOrder Int      @default(0)
  isMain       Boolean  @default(false)

  // timestamps (opcional)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relation
  product      Product  @relation(fields: [productID], references: [productID], onDelete: Cascade, onUpdate: Cascade)

  // Asegura un orden único por producto (evita duplicar el mismo orden)
  @@unique([productID, displayOrder])
  @@index([productID])
}

model ProductVariant {
  productVariantID Int      @id @default(autoincrement())
  productID        Int
  sizeID           Int
  colorID          Int
  sku              String   @unique @db.VarChar(100)
  price            Decimal  @db.Decimal(10, 2)
  stock            Int      @default(0)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // relations
  product          Product  @relation(fields: [productID], references: [productID], onDelete: Cascade, onUpdate: Cascade)
  size             Size     @relation(fields: [sizeID], references: [sizeID], onDelete: Restrict, onUpdate: Cascade)
  color            Color    @relation(fields: [colorID], references: [colorID], onDelete: Restrict, onUpdate: Cascade)

  // La combinación size+color por producto debe ser única
  @@unique([productID, sizeID, colorID])
  @@index([productID])
  @@index([sizeID])
  @@index([colorID])
}

model Size {
  sizeID    Int     @id @default(autoincrement())
  sizeLabel String  @db.VarChar(100)
  sizeOrder Int     @default(0)

  // back-relation
  variants  ProductVariant[]
}

model Color {
  colorID   Int     @id @default(autoincrement())
  colorName String  @db.VarChar(100)
  hexCode   String? @db.VarChar(7) // p.ej. #4242aaff

  // back-relation
  variants  ProductVariant[]
}

model Favorite {
  favoriteID Int      @id @default(autoincrement())
  userID     Int
  productID  Int
  addedAt    DateTime @default(now())

  // relations
  user       User     @relation(fields: [userID], references: [userID], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [productID], references: [productID], onDelete: Cascade, onUpdate: Cascade)

  // Evita duplicar "favorito" del mismo producto por el mismo usuario
  @@unique([userID, productID])

  @@index([userID])
  @@index([productID])
}
